Time: O(n)
Space: O(n)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;
        ListNode dummy = new ListNode(-1);
        ListNode result = dummy;
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b) -> a.val-b.val);
        for(ListNode head: lists)
        {
            if(head!=null) pq.add(head);
        }
        while(!pq.isEmpty())
        {
            ListNode min = pq.poll();
            dummy.next = min;
            dummy = dummy.next;
            if(min.next!=null) pq.add(min.next);
        }
        return result.next;
    }
}
