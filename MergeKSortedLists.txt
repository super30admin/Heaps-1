/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
Time Complexity - O(N log k)
Space Complexity - O(N)
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b) -> a.val -b.val);
        ListNode dummy = new ListNode(-1);

        for(ListNode head : lists) {
            if (head != null) {
                pq.add(head);
            }
        }

        ListNode curr = dummy;
        while(!pq.isEmpty()) {
            ListNode currMin = pq.poll();
            
            curr.next = currMin;
            curr = curr.next;
            if (currMin.next !=null) {
                pq.add(currMin.next);
            }
        }
        return dummy.next;
    }
}
