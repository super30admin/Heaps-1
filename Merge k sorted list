// Can you please look over my solution: of divied and conquer, 
//I'm getting unexpected output for one of the test case
//input : [[],[-1,5,11],[],[6,10]]
// Error - Found cycle in the ListNode

// TC: O(nlogK) ; SP: O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// divide and conquer solution
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;
        return divideConquer(lists, 0, lists.length-1);
    }
    
    public ListNode divideConquer(ListNode[] lists, int start, int end){
        
           if(start == end)
           return lists[start];
        
        int mid = start + ((end-start)/2);
      //  System.out.println(mid);
        
        ListNode a = divideConquer(lists, 0, mid);
        ListNode b = divideConquer(lists, mid+1, end);
      
        
        return merge(a, b);
    }
    
    public ListNode merge(ListNode list1, ListNode list2){
        
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        
        if(list1.val < list2.val){
            list1.next = merge(list1.next, list2);
            return list1;
        }
        else{
            list2.next = merge(list1, list2.next);
            return list2;
        }
        
    }  
}

// heap  solution : 
// TC: O(Nlog K) 
// At a time, we do logK comparisons in prirority queue -> hepaify operation
// and we may do that logK comparisons N times taking size of the list as N

//: SP: O(k) : size of priority que
/*class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;
     PriorityQueue<ListNode> pq = new PriorityQueue<>((l1, l2) -> l1.val - l2.val);
        for(ListNode list : lists){
            if(list != null)
            pq.add(list);
        }
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        
        while(! pq.isEmpty()){
            ListNode node = pq.poll();
            head.next = node;
            head = node;
            ListNode next = node.next;
            if(next != null)
                pq.add(next);  
        }
        
        return dummy.next;
    }
}*/
