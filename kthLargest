Time: nlogk ( n elements * logk for heapity function inside PQ)
Space: O(k)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(); 
        for(int i=0; i< nums.length; i++)
        {
            if(pq.size() < k)
                pq.add(nums[i]);
            else{
                if(nums[i] > pq.peek())
                {
                    pq.poll();
                    pq.add(nums[i]);
                }
            }
            
        }
        return pq.peek();
    }
}
