class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq= new PriorityQueue<>((a,b)-> a-b);
        for(int i=0;i<nums.length;i++){
            pq.add(nums[i]);
            if(pq.size()>k){
                pq.poll();
            }
        }
        return pq.poll();
    }
}
//Time complexity : O(n logk)
//Space Complexity : O(k)
//approach: use min heap, whenever the size exceeds k remove element from heap, return the largest element by removing element from heap
