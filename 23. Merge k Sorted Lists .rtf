{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
    # def __lt__(self, other):\
    #     return self.val < other.val\
    \
class Solution:\
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\
        \
        dummy = ListNode(0)\
        cur = dummy\
        minHeap = []\
        for i, head in enumerate(lists):\
            if head:\
                heappush(minHeap, (head.val, i))\
        \
        while minHeap:\
            val, i = heappop(minHeap)\
            cur.next = ListNode(val)\
            cur = cur.next\
            if lists[i].next:\
                heappush(minHeap, (lists[i].next.val, i))\
                lists[i] = lists[i].next\
        return dummy.next\
        \
        }